/* Copyright (c) 2012 Jamie Barnes
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

// $Id: debug.js 21 2012-06-19 20:16:55Z jimbobmcgee $
 
var util = require('util');

var lastDate = null;

function debugPrint(obj) {
	if (obj === undefined || obj === null) return '';
	if (obj.constructor === String) return obj;
	if (Buffer.isBuffer(obj) || obj.constructor === {}.constructor) return util.inspect(obj);
	if (obj.toString !== undefined) return obj.toString();
	return ('' + obj);
}

var exports = module.exports = {};
exports.getWriter =	function(source, options) {
						if (!!options.debug) return function debugWrite() {
							var logDate = new Date();
							if (lastDate === null ||
								logDate.getUTCFullYear() !== lastDate.getUTCFullYear() ||
								logDate.getUTCMonth() !== lastDate.getUTCMonth() ||
								logDate.getUTCDate() !== lastDate.getUTCDate()) console.log(logDate.toLocaleDateString());
								
							lastDate = logDate;
						
							var out = [
							    '  ',
								(logDate.getHours() < 10) ? '0' : '',
								logDate.getHours(), ':',
								(logDate.getMinutes() < 10) ? '0' : '',
								logDate.getMinutes(), ':',
								(logDate.getSeconds() < 10) ? '0' : '',
								logDate.getSeconds(), '.',
								(logDate.getMilliseconds() < 10) ? '0' : '',
								(logDate.getMilliseconds() < 100) ? '0' : '',
								logDate.getMilliseconds(), ': ', 
								source, ' => '
							];
							Array.prototype.push.apply(
								out, 
								Array.prototype.map.call(arguments, debugPrint)	// call debugPrint on every arg, e.g. to jsonify objects
							);
							
							var ret = '';
							console.info(ret = Array.prototype.join.call(out, ''));	// concat all arguments and output to stdout
							return ret;
						}
						else return function debugNoop() { };						// do nothing, if we're not debugging
					};